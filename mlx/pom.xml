<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!--
        UMS consists of two major parts: UMS itself and the third party software 
        needed to run it. While PMS itself is 100% pure Java, some of the third party 
        software is not. This means building a platform specific distribution boils 
        down to first building the pms.jar and then assembling all application resources. 
        
        Note that Maven 3 does not automatically install all dependencies, unlike Maven 2.
		To install external dependencies to your local repository, run the following commands:

		mvn external:install
        
        To build PMS, do:
        
            mvn clean package
        
        After building, the "target" directory will contain the binary.
        To generate a full source code report, do:
        
            mvn site 
        
        After generating, the "target/site" directory will contain the reports.
    -->
    
	<modelVersion>4.0.0</modelVersion>

	<artifactId>ums-mlx</artifactId>
	<name>UMS MLX extension</name>
	<packaging>jar</packaging>
	<description>The core of ums-mlx includes the business code as well as the GUI</description>

	<parent>
		<groupId>net.pms</groupId>
		<artifactId>ums</artifactId>
		<version>7.5.1-SNAPSHOT</version>
	</parent>

	<properties>
		<!-- Used library versions -->
		<jna-version>4.2.2</jna-version>
		<cuelib-version>1.2.1-2008-06-13</cuelib-version>
		<junrar-version>0.7</junrar-version>
		<mediautil-version>1.0</mediautil-version>
		<jcalendar-version>1.1.1</jcalendar-version>
		<slf4j-version>1.7.21</slf4j-version>
		<logback-version>1.1.8</logback-version>
		<bsh-core-version>2.0b4</bsh-core-version>
		<commons-codec-version>1.10</commons-codec-version>
		<commons-collections-version>3.2.2</commons-collections-version>
		<commons-configuration-version>1.10</commons-configuration-version>
		<commons-httpclient-version>3.1</commons-httpclient-version>
		<commons-io-version>2.5</commons-io-version>
		<commons-lang3-version>3.5</commons-lang3-version>
		<h2-version>1.4.192</h2-version>
		<maven-artifact-version>3.1.0</maven-artifact-version>
		<commons-imaging-version>1.0-SNAPSHOT</commons-imaging-version>
		<gson-version>2.7</gson-version>
		<netty-version>3.10.6.Final</netty-version>
		<rome-version>1.0.0</rome-version>
		<thumbnailator-version>[0.4, 0.5)</thumbnailator-version>
		<twelvemonkeys-imageio-version>3.2.1</twelvemonkeys-imageio-version>
		<jaudiotagger-version>2.2.5</jaudiotagger-version>
		<org.assertj-version>2.2.0</org.assertj-version>
		<jmte-version>3.0</jmte-version>
		<jnotify-version>0.94</jnotify-version>
		<!-- Skip 4.65-1.05-RC because it doesn't work, author is working on fixing it -->
		<sevenzip-version>4.65-1.04-RC</sevenzip-version>
		<cling-version>2.1.0</cling-version>
		<jmdns-version>3.4.1</jmdns-version>
		<chromcast-api-v2-version>0.10.0</chromcast-api-v2-version>
		<jmustache-version>1.12</jmustache-version>
		<javassist-version>3.20.0-GA</javassist-version>
		<icu4j-version>58.2</icu4j-version>
		<fest-util-version>1.2.5</fest-util-version>
		<coverartarchive-api-version>2.1.0</coverartarchive-api-version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<!-- External files properties -->
		<external-resources.directory>${project.basedir}/src/main/external-resources</external-resources.directory>
		<external-resources.transcode-tools.directory>${external-resources.directory}/transcode-tools</external-resources.transcode-tools.directory>
		<target.transcode-tools.directory>${project.build.directory}/bin</target.transcode-tools.directory>
	</properties>

	<repositories>
		<!-- netty -->
		<repository>
			<id>jboss</id>
			<url>http://repository.jboss.org/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<!-- GSON -->
		<repository>
			<id>google-gson</id>
			<name>google-gson</name>
			<url>https://google-gson.googlecode.com/svn/mavenrepo/</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<!-- JBoss.org repository -->
		<repository>
			<id>jboss.releases</id>
			<name>JBoss releases</name>
			<url>https://repository.jboss.org/nexus/content/repositories/releases/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<!-- Cling -->
		<repository>
			<id>4thline-repo</id>
			<url>http://4thline.org/m2</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	
		<!-- jaudiotagger -->
		<repository>
			<id>jaudiotagger-repository</id>
			<url>https://dl.bintray.com/ijabz/maven</url>
		</repository>
		
		<repository>
  			<id>apache.snapshots</id>
  			<name>Apache Development Snapshot Repository</name>
  			<url>https://repository.apache.org/content/repositories/snapshots/</url>
  			<releases>
    			<enabled>false</enabled>
  			</releases>
  			<snapshots>
    			<enabled>true</enabled>
  			</snapshots>
		</repository>  
	</repositories>

	<dependencies>
		<dependency>
			<groupId>org.beanshell</groupId>
			<artifactId>bsh-core</artifactId>
			<version>${bsh-core-version}</version>
		</dependency>

		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>${commons-codec-version}</version>
		</dependency>

		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>${commons-collections-version}</version>
		</dependency>

		<dependency>
			<groupId>commons-configuration</groupId>
			<artifactId>commons-configuration</artifactId>
			<version>${commons-configuration-version}</version>
			<exclusions>
				<!-- no need for commons-logging, as jcl-over-slf4j provides the impl -->
				<exclusion>
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>${commons-httpclient-version}</version>
			<exclusions>
				<!-- no need for commons-logging, as jcl-over-slf4j provides the impl -->
				<exclusion>
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io-version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang3-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.fourthline.cling</groupId>
			<artifactId>cling-core</artifactId>
			<version>${cling-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.fourthline.cling</groupId>
			<artifactId>cling-support</artifactId>
			<version>${cling-version}</version>
		</dependency>
		
		<dependency>
			<groupId>javax.jmdns</groupId>
			<artifactId>jmdns</artifactId>
			<version>${jmdns-version}</version>
		</dependency>

        <dependency>
            <groupId>su.litvak.chromecast</groupId>
            <artifactId>api-v2</artifactId>
            <version>${chromcast-api-v2-version}</version>
        </dependency>
        
		<dependency>
			<groupId>com.samskivert</groupId>
			<artifactId>jmustache</artifactId>
			<version>${jmustache-version}</version>
		</dependency>
        
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2-version}</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback-version}</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback-version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-artifact</artifactId>
			<version>${maven-artifact-version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-imaging</artifactId>
			<version>${commons-imaging-version}</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>${gson-version}</version>
		</dependency>

		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty</artifactId>
			<version>${netty-version}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>net.java.dev.rome</groupId>
			<artifactId>rome</artifactId>
			<version>${rome-version}</version>
		</dependency>

		<dependency>
			<groupId>net.coobird</groupId>
			<artifactId>thumbnailator</artifactId>
			<version>${thumbnailator-version}</version>
		</dependency>
		
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-core</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-jpeg</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-tiff</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-bmp</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>

		<dependency>
			<groupId>net.jthink</groupId>
			<artifactId>jaudiotagger</artifactId>
			<version>${jaudiotagger-version}</version>
		</dependency>

		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>binding</artifactId>
			<version>${jgoodies-binding-version}</version>
		</dependency>

		<!-- XXX: not Mavenized: http://flib.sourceforge.net/JCalendar/doc/index.html -->
		<dependency>
			<groupId>org.freixas</groupId>
			<artifactId>jcalendar</artifactId>
			<version>${jcalendar-version}</version>
		</dependency>

		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-common</artifactId>
			<version>${jgoodies-common-version}</version>
		</dependency>

		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-forms</artifactId>
			<version>${jgoodies-forms-version}</version>
		</dependency>


		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-looks</artifactId>
			<version>${jgoodies-looks-version}</version>
		</dependency>

		<dependency>
			<groupId>com.github.junrar</groupId>
			<artifactId>junrar</artifactId>
			<version>${junrar-version}</version>
		</dependency>

		<!-- XXX: not Mavenized: https://code.google.com/p/cuelib/ -->
		<dependency>
			<groupId>jwbroek.cuelib</groupId>
			<artifactId>cuelib</artifactId>
			<version>${cuelib-version}</version>
		</dependency>

		<!-- XXX: not Mavenized: http://sourceforge.net/projects/mediachest/ -->
		<dependency>
			<groupId>mediautil</groupId>
			<artifactId>mediautil</artifactId>
			<version>${mediautil-version}</version>
		</dependency>

		<dependency>
			<groupId>xmlwise</groupId>
			<artifactId>xmlwise</artifactId>
			<version>${xmlwise-version}</version>
		</dependency>
		
		<dependency>
			<groupId>sevenzip</groupId>
			<artifactId>jbinding</artifactId>
			<version>${sevenzip-version}</version>
		</dependency>
		
		<dependency>
			<groupId>sevenzip-allplatforms</groupId>
			<artifactId>jbinding-allplatforms</artifactId>
			<version>${sevenzip-version}</version>
		</dependency>
		
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
			<version>${jna-version}</version>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna-platform</artifactId>
			<version>${jna-version}</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit-version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<!-- use 3.0.0 for Java 8 projects -->
			<version>${org.assertj-version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.floreysoft</groupId>
			<artifactId>jmte</artifactId>
			<version>${jmte-version}</version>
		</dependency>
		
		<dependency>
			<groupId>jnotify</groupId>
			<artifactId>jnotify</artifactId>
			<version>${jnotify-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>${javassist-version}</version>
		</dependency>
		
		<dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>icu4j</artifactId>
			<version>${icu4j-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.easytesting</groupId>
			<artifactId>fest-util</artifactId>
			<version>${fest-util-version}</version>
		</dependency>
		
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>annotations</artifactId>
			<version>${findbugs-annotations-version}</version>
		</dependency>
		
		<dependency>
			<groupId>fm.last</groupId>
			<artifactId>coverartarchive-api</artifactId>
			<version>${coverartarchive-api-version}</version>
		</dependency>
	</dependencies>

	<build>
		<defaultGoal>assembly:assembly</defaultGoal>

		<resources>
			<!-- squashed bug: this needs to be defined explicitly if a <resources>...</resources> 
				section is used -->

			<resource>
				<directory>src/main/resources</directory>
				<!-- By default Maven packages resources in the top-level of the jar. 
					For compatibility with trunk PMS, we preserve that destination. If this is 
					ever changed to the Maven default, a handful of files will need to be changed 
					to reference "/resource.name" rather than "/resources/resource.name" -->
				<targetPath>resources</targetPath>
				<excludes>
					<exclude>project.properties</exclude>
				</excludes>

				<!-- Avoid inadvertently filtering binaries -->
				<filtering>false</filtering>
			</resource>

			<resource>
				<directory>src/main/resources</directory>
				<targetPath>resources</targetPath>
				<includes>
					<include>project.properties</include>
				</includes>

				<!-- Filter to replace Maven properties -->
				<filtering>true</filtering>
			</resource>

			<!-- There are (or were) reportedly issues with Eclipse's "Externalize 
				Strings" wizard if these aren't in the source tree, so keep them here for 
				now, even though it's Mavenly-incorrect. -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
				</includes>
			</resource>

			<!-- Copy and filter the NSIS header file to replace Maven properties -->
			<resource>
				<directory>src/main/external-resources/nsis</directory>
				<includes>
					<include>extra.nsh</include>
				</includes>
				<filtering>true</filtering>
				<targetPath>..</targetPath>
			</resource>
		</resources>

		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<includes>
					<include>project.properties</include>
				</includes>
				<targetPath>resources</targetPath>

				<!-- Enable the use of Maven properties -->
				<filtering>true</filtering>
			</testResource>
		  
            <!--*.srt files to test charset detection-->
			<testResource>
				<directory>src/test/resources/net/pms/util</directory>
				<includes>
					<include>*.srt</include>
				</includes>
				<targetPath>net/pms/util</targetPath>
			</testResource>
		</testResources>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<!-- Force language because JUnit tests depend on english language  strings -->
						<argLine>-Duser.language=en</argLine>
					</configuration>
					<version>${maven-surefire-plugin-version}</version>
				</plugin>
				
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											pl.project13.maven
										</groupId>
										<artifactId>
											git-commit-id-plugin
										</artifactId>
										<versionRange>
											[1.9,)
										</versionRange>
										<goals>
											<goal>revision</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-antrun-plugin
										</artifactId>
										<versionRange>
											[1.7,)
										</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>

			<!-- Plugin to add git commit information properties. These are used in 
				the project.properties files. See: https://github.com/ktoso/maven-git-commit-id-plugin -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>${git-commit-id-plugin-version}</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dateFormat>yyyy-MM-dd</dateFormat>
					<verbose>false</verbose>
					<generateGitPropertiesFile>false</generateGitPropertiesFile>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin-version}</version>
				<configuration>
					<source>${targetJdk}</source>
					<target>${targetJdk}</target>
					<fork>false</fork>
					<testSource>${targetJdk}</testSource>
					<testTarget>${targetJdk}</testTarget>
					<compilerArgument>${compilerArgument}</compilerArgument>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>${maven-eclipse-plugin-version}</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
					<wtpversion>1.5</wtpversion>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-idea-plugin</artifactId>
				<version>${maven-idea-plugin-version}</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
					<dependenciesAsLibraries>true</dependenciesAsLibraries>
					<useFullNames>false</useFullNames>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>${maven-site-plugin-version}</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.doxia</groupId>
						<artifactId>doxia-module-docbook-simple</artifactId>
						<version>${doxia-module-docbook-simple-version}</version>
					</dependency>
				</dependencies>

				<configuration>
					<reportPlugins>

						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-project-info-reports-plugin</artifactId>
							<version>${maven-project-info-reports-plugin-version}</version>
							<reports>
								<report>index</report>
								<report>dependencies</report>
								<report>dependency-convergence</report>
								<report>dependency-management</report>
								<report>plugins</report>
							</reports>
						</plugin>

						<!-- PMS tests report -->
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-surefire-report-plugin</artifactId>
							<version>${maven-surefire-plugin-version}</version>
							<configuration>
								<showSuccess>false</showSuccess>
							</configuration>
						</plugin>

						<!-- Javadoc -->
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-javadoc-plugin</artifactId>
							<version>${maven-javadoc-plugin-version}</version>
							<configuration>
								<quiet>true</quiet>
								<tags>
									<tag>
										<name>todo</name>
										<placement>a</placement>
										<head>To Do:</head>
									</tag>
									<tag>
										<name>review</name>
										<placement>a</placement>
										<head>Review:</head>
									</tag>
								</tags>
								<detectJavaApiLink>false</detectJavaApiLink>
								<links>
									<link>http://download.oracle.com/javase/6/docs/api/</link>
								</links>
								<!-- Doclet to generate class diagrams inside Javadoc. Requires the 
									installation of Graphviz (http://www.graphviz.org/) -->
								<doclet>org.jboss.apiviz.APIviz</doclet>
								<docletArtifact>
									<groupId>org.jboss.apiviz</groupId>
									<artifactId>apiviz</artifactId>
									<version>${apiviz-version}</version>
								</docletArtifact>
								<useStandardDocletOptions>true</useStandardDocletOptions>
							</configuration>
						</plugin>

						<!-- Class dependency report -->
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>jdepend-maven-plugin</artifactId>
							<version>${jdepend-maven-plugin-version}</version>
						</plugin>

						<!-- Findbugs report -->
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>findbugs-maven-plugin</artifactId>
							<version>${findbugs-maven-plugin-version}</version>
						</plugin>

						<!-- Checkstyle report will go out of memory because of the huge amount 
							of issues it finds(!) <plugin> <groupId>org.apache.maven.plugins</groupId> 
							<artifactId>maven-checkstyle-plugin</artifactId> <version>2.8</version> </plugin> -->

						<!-- Cobertura Test Coverage report -->
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>cobertura-maven-plugin</artifactId>
							<version>${cobertura-maven-plugin-version}</version>
						</plugin>

						<!-- PMD and CPD code analysis report -->
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-pmd-plugin</artifactId>
							<version>${maven-pmd-plugin-version}</version>
							<configuration>
								<linkXref>false</linkXref>
								<sourceEncoding>utf-8</sourceEncoding>
								<minimumTokens>100</minimumTokens>
								<targetJdk>${targetJdk}</targetJdk>
							</configuration>
						</plugin>

						<plugin>
							<groupId>com.github.jrh3k5</groupId>
							<artifactId>l10n-maven-plugin</artifactId>
							<version>1.4</version>
							<configuration>
								<failBuild>true</failBuild>
								<messagesFile>${project.basedir}/src/main/resources/i18n/messages.properties</messagesFile>
								<translatedMessagesPattern>src/main/resources/i18n/messages*.properties</translatedMessagesPattern>
							</configuration>
						</plugin>

					</reportPlugins>
				</configuration>
			</plugin>


		</plugins>
	</build>

	<profiles>

		<!-- Windows profile: takes care of building the final package for Microsoft Windows -->
		<profile>
			<id>windows</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<family>windows</family>
				</os>
			</activation>

			<build>
				<plugins>
				
				</plugins>
			</build>
		</profile>


		<!-- Linux profile: takes care of building the final package for Linux -->
		<profile>
			<id>linux</id>
			<!--
				 this setting does the right thing on Linux
				 and is needed for the Hudson profile to work
			 -->
			<activation>
				<activeByDefault>true</activeByDefault>
				<os>
					<family>unix</family>
					<name>Linux</name>
				</os>
			</activation>

			<build>
				<plugins>
				</plugins>
			</build>
		</profile>


		<!-- Mac OSX profile: takes care of building the final package for Mac OSX -->
		<profile>
			<id>osx</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<family>mac</family>
				</os>
			</activation>

			<build>
				<plugins>

				</plugins>
			</build>
		</profile>

		<!--
			Hudson (windows-jar): minimal profile that builds pms.jar with the
			Windows JNA. The POSIX JNA causes snapshot builds to crash the JVM on
			Windows, whereas the Windows JNA only disables MediaInfo for Ubuntu
			users, who can still use ffmpeg.

			Another difference from the other profiles is that we don't download the
			binaries or build the tarball.
		-->
		<profile>
			<id>windows-jar</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>env.HUDSON_URL</name>
				</property>
			</activation>
		</profile>

		<!-- This profile allows running UMS from inside qn IDE (Eclipse, IntelliJ etc.) -->
		<profile>
			<id>run-from-ide</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec-maven-plugin-version}</version>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<classpathScope>test</classpathScope>
									<mainClass>net.pms.PMS</mainClass>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
